{"version":3,"sources":["context.js","components/contacts/Contact.js","components/contacts/Contacts.js","components/layout/TextInputGroup.js","components/contacts/AddContact.js","components/contacts/EditContact.js","components/layout/Header.js","components/pages/About.js","components/pages/NotFound.js","components/test/Test.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","reducer","state","action","type","contacts","filter","contact","id","payload","map","Provider","dispatch","setState","axios","get","response","this","data","value","props","children","Component","Consumer","Contact","showContactInfo","onShowClick","onDeleteClick","a","async","delete","name","email","phone","className","style","cursor","onClick","float","color","bind","to","marginRight","fontSize","Contacts","Fragment","key","TextInputGroup","label","placeholder","onChange","error","htmlFor","classnames","defaultProps","AddContact","errors","e","target","onSubmit","preventDefault","newContact","post","history","push","EditContact","updateContact","match","params","put","Header","branding","href","Test","title","body","fetch","then","json","console","log","App","exact","path","component","About","NotFound","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.82673388.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\n\nconst Context = React.createContext();\n\nconst reducer = (state,action) => {\n    switch(action.type) {\n        case 'DELETE_CONTACT':\n            return {\n                ...state,\n                contacts: state.contacts.filter(contact =>\n                contact.id !== action.payload)\n            };\n        case 'ADD_CONTACT':\n            return {\n                ...state,\n                contacts: [action.payload, ...state.contacts]\n            };\n        case 'UPDATE_CONTACT':\n            return {\n                ...state,\n                contacts: state.contacts.map(contact => contact.id === action.payload.id ? (contact = action.payload) : contact)\n            };\n        default:\n            return state;\n    }\n}\n\nexport class Provider extends Component {\n    state = {\n        contacts: [\n        ],\n        dispatch: action => {\n            this.setState(state => reducer(state, action));\n        }\n    };\n\n    async componentDidMount() {\n        const response = await axios.get('https://jsonplaceholder.typicode.com/users');\n        this.setState({contacts: response.data})\n    }\n    \n    render() {\n        return (\n            <Context.Provider value={this.state}>\n                {this.props.children}\n            </Context.Provider>\n        )\n    }\n}\n\nexport const Consumer = Context.Consumer;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { Consumer } from '../../context';\nimport axios from 'axios';\n\n\n// Class Component\nclass Contact extends Component {\n    state = {\n        showContactInfo: false\n    };\n\n    onShowClick = () => {\n        this.setState(\n            {\n                showContactInfo: !this.state.showContactInfo\n            }\n        );\n    }\n\n    onDeleteClick = async (id,dispatch) => {\n        // HTTP Delete Request\n        try {\n            await axios.delete(`https://jsonplaceholder.typicode.com/users/${id}`);\n            dispatch({ type: 'DELETE_CONTACT', payload: id });\n        } catch(e) {\n            dispatch({ type: 'DELETE_CONTACT', payload: id });\n        }\n\n    }\n\n    render() {\n        const { id, name, email, phone } = this.props.contact;\n        const { showContactInfo } = this.state;\n\n        return (\n            <Consumer>\n                {\n                value => {\n                    const { dispatch } = value;\n                    return (\n                        <div className=\"card card-body mb-3\">\n                        <h4>\n                            {name}{' '}\n                            <i \n                                style={{cursor: 'pointer'}} \n                                onClick={this.onShowClick} \n                                className={`fas ${showContactInfo ? 'fa-sort-down' : 'fa-caret-left'}`} \n                            />\n                            <i \n                                className=\"fas fa-times\"\n                                style={{ cursor: 'pointer', float: 'right', color: 'red' }}\n                                onClick={this.onDeleteClick.bind(this,id,dispatch)}\n                            />\n                            <Link to={`contact/edit/${id}`}>\n                             <i \n                                    className=\"fas fa-pencil-alt\"\n                                    style={{\n                                        cursor: 'pointer',\n                                        float: 'right',\n                                        color: 'black',\n                                        marginRight: '1rem',\n                                        fontSize: '2vw'\n                                    }}\n                                />\n                            </Link>\n                        </h4>\n                            {showContactInfo ? (<ul className=\"list-group\">\n                                <li className=\"list-group-item\">Email: {email}</li>\n                                <li className=\"list-group-item\">Phone: {phone}</li>\n                            </ul>) : null}\n                        </div>\n                    )\n                }\n                }\n            </Consumer>\n\n        )\n    }\n}\n\n// Checking Prop Types\nContact.propTypes = {\n    contact: PropTypes.object.isRequired\n}\n\nexport default Contact;","import React, { Component } from 'react';\nimport Contact from './Contact';\nimport { Consumer } from '../../context';\n\nclass Contacts extends Component {\n    render() {\n        return (\n            <Consumer>\n                {value => {\n                    const { contacts } = value;\n                    return (\n                        <React.Fragment>\n                            <h1 className=\"display-4 mb-2\">\n                                <span className=\"text-danger\">Contact</span> List\n                            </h1>\n                            {\n                                contacts.map(contact => \n                                    <Contact\n                                        key={contact.id}\n                                        contact={contact}\n                                    />\n                                    )\n                            }\n                        </React.Fragment>\n                    )\n                }}\n            </Consumer>\n        )\n    }\n}\n\nexport default Contacts;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\n\nconst TextInputGroup = ({\n    label,\n    name,\n    value,\n    placeholder,\n    type,\n    onChange,\n    error\n}) => {\n    return (\n        <div className=\"form-group\">\n            <label htmlFor={name}>{label}</label>\n            <input\n                type={type}\n                name={name}\n                className={classnames('form-control form-control-lg',{\n                    'is-invalid': error\n                })}\n                placeholder={placeholder}\n                value={value}\n                onChange={onChange}\n            />\n            {error && <div className=\"invalid-feedback\">{error}</div>\n            }\n        </div>\n    );\n};\n\nTextInputGroup.propTypes = {\n    label: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    placeholder: PropTypes.string.isRequired,\n    value: PropTypes.string.isRequired,\n    type: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n    error: PropTypes.string\n}\n\nTextInputGroup.defaultProps = {\n    type: 'text'\n}\n\nexport default TextInputGroup;\n","import React, { Component } from 'react';\nimport { Consumer } from '../../context';\nimport TextInputGroup from '../layout/TextInputGroup';\nimport axios from 'axios';\n\nclass AddContact extends Component {\n    state = {\n        name: '',\n        email: '',\n        phone: '',\n        errors: {}\n    };\n\n    onChange = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value\n        });\n    };\n\n    onSubmit = async (dispatch, e) => {\n        e.preventDefault();\n\n        const { name, email, phone } = this.state;\n\n        // Check For Errors\n        if(name === '') {\n            this.setState({\n                errors: {\n                    name: 'Name is required'\n                }\n            });\n            return;\n        }\n\n        if(email === '') {\n            this.setState({\n                errors: {\n                    email: 'Email is required'\n                }\n            });\n            return;\n        }\n\n        if(phone === '') {\n            this.setState({\n                errors: {\n                    phone: 'Phone is required'\n                }\n            });\n            return;\n        }\n\n        const newContact = {\n            name,\n            email,\n            phone\n        };\n\n        // HTTP Post Request\n        const response = axios.post('https://jsonplaceholder.typicode.com/users', newContact);\n        dispatch({ type: 'ADD_CONTACT', payload: response.data });\n\n        // Clear State\n        this.setState({\n            name: '',\n            email: '',\n            phone: '',\n            errors: {}\n        });\n\n        // Redirect\n        this.props.history.push('/');\n    };\n\n    render() {\n        const { name, email, phone, errors } = this.state;\n\n        return (\n            <Consumer>\n                {value => {\n                    const { dispatch } = value;\n                    return (\n                        <div className=\"card mb-3\">\n                            <div className=\"card-header\">\n                            Add Contact\n                        </div>\n                            <div className=\"card-body\">\n                                <form onSubmit={this.onSubmit.bind(this,dispatch)}>\n                                    <TextInputGroup\n                                        label=\"Name\"\n                                        name=\"name\"\n                                        placeholder=\"Enter Name\"\n                                        value={name}\n                                        onChange={this.onChange}\n                                        error={errors.name}\n                                    />\n                                    <TextInputGroup\n                                        label=\"Email\"\n                                        name=\"email\"\n                                        type=\"email\"\n                                        placeholder=\"Enter Email\"\n                                        value={email}\n                                        onChange={this.onChange}\n                                        error={errors.email}\n                                    />\n                                    <TextInputGroup\n                                        label=\"Phone\"\n                                        name=\"phone\"\n                                        placeholder=\"Enter Phone\"\n                                        value={phone}\n                                        onChange={this.onChange}\n                                        error={errors.phone}\n                                    />                                                                        \n                                    <input\n                                        type=\"submit\"\n                                        value=\"Add Contact\"\n                                        className=\"btn btn-primary btn-block\"\n                                    />\n                                </form>\n                            </div>\n                        </div>\n                    )\n                }}\n            </Consumer>\n        )\n    }\n}\n\nexport default AddContact;","import React, { Component } from 'react';\nimport { Consumer } from '../../context';\nimport TextInputGroup from '../layout/TextInputGroup';\nimport axios from 'axios';\n\nclass EditContact extends Component {\n    state = {\n        name: '',\n        email: '',\n        phone: '',\n        errors: {}\n    };\n\n    async componentDidMount() {\n        const { id } = this.props.match.params;\n        const response = await axios.get(`https://jsonplaceholder.typicode.com/users/${id}`);\n        const contact = response.data;\n        this.setState({\n            name: contact.name,\n            email: contact.email,\n            phone: contact.phone\n        })\n    }\n\n    onChange = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value\n        });\n    };\n\n    onSubmit = async (dispatch, e) => {\n        e.preventDefault();\n\n        const { name, email, phone } = this.state;\n\n        // Check For Errors\n        if(name === '') {\n            this.setState({\n                errors: {\n                    name: 'Name is required'\n                }\n            });\n            return;\n        }\n\n        if(email === '') {\n            this.setState({\n                errors: {\n                    email: 'Email is required'\n                }\n            });\n            return;\n        }\n\n        if(phone === '') {\n            this.setState({\n                errors: {\n                    phone: 'Phone is required'\n                }\n            });\n            return;\n        }\n\n        const updateContact = {\n            name,\n            email,\n            phone\n        }\n        const { id } = this.props.match.params;\n        const response = await axios.put\n            (`https://jsonplaceholder.typicode.com/users/${id}`, updateContact);\n        dispatch({ type:'UPDATE_CONTACT', payload: response.data });\n        \n        // Clear State\n        this.setState({\n            name: '',\n            email: '',\n            phone: '',\n            errors: {}\n        });\n\n        // Redirect\n        this.props.history.push('/');\n    };\n\n    render() {\n        const { name, email, phone, errors } = this.state;\n\n        return (\n            <Consumer>\n                {value => {\n                    const { dispatch } = value;\n                    return (\n                        <div className=\"card mb-3\">\n                            <div className=\"card-header\">\n                            Edit Contact\n                        </div>\n                            <div className=\"card-body\">\n                                <form onSubmit={this.onSubmit.bind(this,dispatch)}>\n                                    <TextInputGroup\n                                        label=\"Name\"\n                                        name=\"name\"\n                                        placeholder=\"Enter Name\"\n                                        value={name}\n                                        onChange={this.onChange}\n                                        error={errors.name}\n                                    />\n                                    <TextInputGroup\n                                        label=\"Email\"\n                                        name=\"email\"\n                                        type=\"email\"\n                                        placeholder=\"Enter Email\"\n                                        value={email}\n                                        onChange={this.onChange}\n                                        error={errors.email}\n                                    />\n                                    <TextInputGroup\n                                        label=\"Phone\"\n                                        name=\"phone\"\n                                        placeholder=\"Enter Phone\"\n                                        value={phone}\n                                        onChange={this.onChange}\n                                        error={errors.phone}\n                                    />                                                                        \n                                    <input\n                                        type=\"submit\"\n                                        value=\"Update Contact\"\n                                        className=\"btn btn-primary btn-block\"\n                                    />\n                                </form>\n                            </div>\n                        </div>\n                    )\n                }}\n            </Consumer>\n        )\n    }\n}\n\nexport default EditContact;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\n\n// Functional Component\nconst Header = (props) => {\n    const {branding} = props;\n    return (\n        <nav className=\"navbar navbar-expand-sm navbar-dark bg-danger mb-3 py-0\">\n            <div className=\"container\">\n                <a href=\"/\" className=\"navbar-brand\">\n                    {branding}\n                </a>\n                <div>\n                    <ul className=\"navbar-nav mr-auto\">\n                        <li className=\"nav-item\">\n                            <Link to=\"/\" className=\"nav-link\"><i className=\"fas fa-home\" /> Home</Link>\n                        </li>\n                        <li className=\"nav-item\">\n                            <Link to=\"/contact/add\" className=\"nav-link\"><i className=\"fas fa-plus\" /> Add</Link>\n                        </li>\n                        <li className=\"nav-item\">\n                            <Link to=\"/about\" className=\"nav-link\"><i className=\"fas fa-question\" /> About</Link>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n    )\n}\n\n// Default Props\nHeader.defaultProps = {\n    branding: 'My App'\n}\n\n// Checking Prop Types\nHeader.propTypes = {\n    branding: PropTypes.string.isRequired\n}\n\nexport default Header;\n","import React from 'react'\n\nexport default (props) => {\n    return (\n        <div>\n            <h1 className=\"display-4\">About Contact Manager</h1>\n            <p className=\"lead\">Simple app to manage contacts</p>\n            <p className=\"text-secondary\">Version 1.0.0</p>\n        </div>\n    )\n}\n","import React from 'react'\n\nexport default () => {\n    return (\n        <div>\n            <h1 className=\"display-4\"><span className=\"text-danger\">404</span> Page Not Found</h1>\n            <p className=\"lead\">Sorry, that page does not exist</p>\n        </div>\n    )\n}\n","import React, { Component } from 'react';\n\nclass Test extends Component {\n    state = {\n        title: '',\n        body: ''\n    }\n    componentDidMount() {\n        fetch\n        ('https://jsonplaceholder.typicode.com/posts/1')\n            .then(response => response.json())\n            .then(data => this.setState({\n                title: data.title,\n                body: data.body\n            }));\n    }\n\n    componentWillMount() {\n        console.log('componentWillMount...');\n    }\n\n    render() {\n        const { title, body } = this.state;\n        return (\n            <div>\n                <h1>{title}</h1>\n                <p>{body}</p>\n            </div>\n        )\n    }\n}\n\nexport default Test;","import React, { Component } from 'react';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport Contacts from './components/contacts/Contacts';\nimport AddContact from './components/contacts/AddContact';\nimport EditContact from './components/contacts/EditContact';\nimport Header from './components/layout/Header';\nimport About from './components/pages/About';\nimport NotFound from './components/pages/NotFound';\nimport Test from './components/test/Test';\nimport { Provider } from './context';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider>\n        <Router>\n          <div className=\"App\">\n            <Header branding=\"Contact Manager\" />\n            <div className=\"container\">\n              <Switch>\n                <Route exact path=\"/\" component={Contacts} />\n                <Route exact path=\"/contact/add\" component={AddContact} />\n                <Route exact path=\"/contact/edit/:id\" component={EditContact} />\n                <Route exact path=\"/about\" component={About} />\n                <Route exact path=\"/test\" component={Test} />\n                <Route component={NotFound} />\n              </Switch>\n            </div>\n          </div>\n        </Router>\n      </Provider>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}